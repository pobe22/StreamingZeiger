@model StreamingZeiger.ViewModels.MediaItemViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
	var currentUrl = Context.Request.Path + Context.Request.QueryString;
}

<div class="card h-100 shadow-sm">
    @Html.AntiForgeryToken()
    <img src="@Url.Content(Model.Series.PosterFile)" class="card-img-top" alt="@Model.Series.Title" />
    <div class="card-body d-flex flex-column">
        <h5 class="card-title text-truncate">@Model.Series.Title (@Model.Series.StartYear - @Model.Series.EndYear)</h5>

        <!-- Genres -->
        @if (Model.Series.Genres.Any())
        {
            <p class="mb-1 text-truncate"><strong>Genres:</strong> @string.Join(", ", Model.Series.Genres.Select(g => g.Name))</p>
        }

        <!-- Bewertung -->
        <div class="my-2">
            <span class="text-warning">
                @for (int i = 1; i <= 5; i++)
                {
                    if (i <= Math.Round(Model.Series.Rating / 2))
                    {
                        <i class="bi bi-star-fill"></i>
                    }
                    else
                    {
                        <i class="bi bi-star"></i>
                    }
                }
            </span>
            <span class="ms-2">(@Model.Series.Rating.ToString("0.0")/10)</span>
        </div>

        <!-- Beschreibung -->
        <p class="mb-3 text-truncate">@Model.Series.Description</p>

        <!-- Watchlist Button -->
        <!-- Aufgabe 5. Frontend Integration -->
        @if (SignInManager.IsSignedIn(User))
        {
            <div class="mb-3">
                <button class="btn @(Model.InWatchlist ? "btn-danger" : "btn-success") btn-sm d-flex align-items-center gap-1 watchlist-toggle"
                        data-media-id="@Model.Series.Id"
                        data-in-watchlist="@(Model.InWatchlist.ToString().ToLower())">
                    <i class="bi @(Model.InWatchlist ? "bi-bookmark-heart-fill" : "bi-bookmark-heart") fs-5"></i>
                    <span>@(Model.InWatchlist ? "Aus Watchlist entfernen" : "Zur Watchlist hinzufügen")</span>
                </button>
            </div>
        }
        
        <!-- Streaming-Dienste -->
        <div class="mb-2">
            @foreach (var s in Model.Series.AvailabilityByService.Where(x => x.Value))
            {
                <span class="badge bg-primary me-1 mb-1">@s.Key</span>
            }
        </div>

        <!-- Details Button -->
        <div class="d-flex flex-wrap gap-2 mt-auto">
            <a class="btn btn-outline-primary btn-sm" href="@Url.Action("Details", "Series", new { id = Model.Series.Id })">
                Details
            </a>
            <button class="btn btn-outline-primary btn-sm movie-details-btn" data-id="@Model.Series.Id">
                Preview
            </button>
        </div>
    </div>
</div>
