@model StreamingZeiger.Models.Movie
@{
    var recommendedMovies = ViewBag.RecommendedMovies as List<StreamingZeiger.Models.Movie>;
    int chunkSize = 4; // 4 Filme pro Slide
    var chunks = recommendedMovies != null
                 ? recommendedMovies.Select((m, i) => new { Movie = m, Index = i })
                                     .GroupBy(x => x.Index / chunkSize)
                                     .Select(g => g.Select(x => x.Movie).ToList())
                                     .ToList()
                 : new List<List<StreamingZeiger.Models.Movie>>();
}

<style>
    /* Carousel Poster Animation */
    #recommendCarousel .carousel-item img {
        height: 200px;
        object-fit: cover;
        opacity: 0;
        transform: scale(0.95);
        transition: opacity 0.6s ease, transform 0.6s ease;
    }

    #recommendCarousel .carousel-item.active img {
        opacity: 1;
        transform: scale(1);
    }

    /* Hover-Effekt */
    .card:hover {
        transform: scale(1.05);
        transition: transform 0.3s ease-in-out;
        z-index: 2;
    }

    /* Fade-In Gallery für Slide */
    .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease, transform 0.6s ease;
    }

        .fade-in.visible {
            opacity: 1;
            transform: translateY(0);
        }
</style>

<div class="container mt-4">
    <div class="row">
        <!-- Poster -->
        <div class="col-md-4">
            <img src="@Url.Content(Model.PosterFile)" alt="@Model.Title Poster" class="img-fluid rounded shadow" />
        </div>

        <!-- Informationen -->
        <div class="col-md-8">
            <h1>@Model.Title (@Model.Year)</h1>
            <h5 class="text-muted">Originaltitel: @Model.OriginalTitle</h5>
            <p class="mt-3">@Model.Description</p>

            <ul class="list-unstyled">
                <li>
                    <strong>Genre:</strong>
                    @foreach (var g in Model.MovieGenres.Select(mg => mg.Genre.Name))
                    {
                        <span class="badge bg-secondary me-1">@g</span>
                    }
                </li>
                <li><strong>Dauer:</strong> @Model.DurationMinutes Min.</li>
                <li><strong>Regie:</strong> @Model.Director</li>
                <li><strong>Cast:</strong> @string.Join(", ", Model.Cast)</li>
            </ul>

            <!-- Verfügbarkeit -->
            <p>
                <strong>Verfügbar bei:</strong>
                @foreach (var s in Model.AvailabilityByService.Where(x => x.Value))
                {
                    <span class="badge bg-primary me-1">@s.Key</span>
                }
            </p>

            <!-- Bewertung -->
            <div class="my-3">
                <strong>Bewertung:</strong>
                <span class="text-warning">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Round(Model.Rating / 2)) // 10er Skala -> 5 Sterne
                        {
                            <i class="bi bi-star-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-star"></i>
                        }
                    }
                </span>
                <span class="ms-2">(@Model.Rating.ToString("0.0")/10)</span>
            </div>

            <!-- Dummy Bewertung abgeben -->
            <form class="mt-3">
                <label class="form-label">Eigene Bewertung abgeben:</label>
                <select class="form-select mb-2" style="max-width:200px;">
                    <option>1 Stern</option>
                    <option>2 Sterne</option>
                    <option>3 Sterne</option>
                    <option>4 Sterne</option>
                    <option>5 Sterne</option>
                </select>
                <button type="button" class="btn btn-outline-success">Absenden</button>
            </form>
        </div>
    </div>

    <!-- Trailer -->
    @if (!string.IsNullOrWhiteSpace(Model.TrailerUrl))
    {
        <div class="row mt-5">
            <div class="col-12">
                <h3>Trailer</h3>
                <div class="ratio ratio-16x9">
                    <iframe src="@Model.TrailerUrl" title="Trailer" allowfullscreen></iframe>
                </div>
            </div>
        </div>
    }

    <!-- Empfehlungen -->
    <div class="row mt-5">
        <div class="col-12">
            <h3>Ähnliche Filme</h3>
            <div id="recommendCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (int i = 0; i < chunks.Count; i++)
                    {
                        var slide = chunks[i];
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <div class="row">
                                @foreach (var movie in slide)
                                {
                                    <div class="col-md-3 mb-3">
                                        <div class="card h-100">
                                            <img src="@Url.Content(movie.PosterFile)"
                                                 class="card-img-top"
                                                 alt="@movie.Title" />
                                            <div class="card-body text-center">
                                                <h6 class="card-title">@movie.Title</h6>
                                                <a href="@Url.Action("Details", "Movies", new { id = movie.Id })"
                                                   class="btn btn-sm btn-outline-primary">Details</a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <!-- Steuerung -->
                <button class="carousel-control-prev" type="button" data-bs-target="#recommendCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#recommendCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    </div>
</div>
<script>
    // Fade-In Animation beim Scrollen
    const fadeElements = document.querySelectorAll('.fade-in');
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, { threshold: 0.1 });
    fadeElements.forEach(el => observer.observe(el));
</script>
